apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

group GROUP   // Maven Group ID for the artifact
version TinkLinkVersion.name

if (project.hasProperty("android")) { // Android libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

publishing {
    publications {
        tinkLink(MavenPublication) {
            artifact sourcesJar
            artifact javadocJar
            artifact AAR_PATH


            artifactId POM_NAME
            version this.version

            pom {
                name = POM_NAME
                packaging = POM_PACKAGING
                url = POM_URL
                description = POM_DESCRIPTION

                // SCM / License / Developers blocks includes some info about us.
                scm {
                    url = POM_URL
                    connection = POM_GIT_URL
                    developerConnection = POM_GIT_URL
                }

                licenses {
                    license {
                        name = POM_LICENSE_NAME
                        url = POM_LICENSE_URL
                    }
                }

                developers {
                    developer {
                        id = POM_DEVELOPER_ID
                        name = POM_DEVELOPER_NAME
                    }
                }

                // This generates POM.xml with proper dependencies.
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                    configurations.implementation.allDependencies.each {
                        // Ensure dependencies such as fileTree are not included.
                        if (it.name != 'unspecified') {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                        }
                    }
                }
            }
        }
    }
}

// Bintray
def bintray_username = hasProperty('BINTRAY_USER') ? BINTRAY_USER : ""
def bintray_apikey = hasProperty('BINTRAY_APIKEY') ? BINTRAY_APIKEY : ""

bintray {
    user = bintray_username
    key = bintray_apikey

    setPublications('tinkLink')
    setConfigurations('archives')
    pkg {
        userOrg = 'tink'
        repo = BINTRAY_REPO
        name = BINTRAY_NAME
        desc = POM_DESCRIPTION
        websiteUrl = POM_URL
        vcsUrl = POM_GIT_URL
        licenses = [POM_LICENSE]
        publish = false
        publicDownloadNumbers = true
        version {
            desc = POM_DESCRIPTION
//            gpg {
//                sign = true //Determines whether to GPG sign the files. The default is false
//                passphrase = properties.getProperty("bintray.gpg.password")
//                //Optional. The passphrase for GPG signing'
//            }
        }
    }
}