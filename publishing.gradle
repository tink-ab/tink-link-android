apply plugin: 'maven-publish'
apply plugin: 'signing'

group = GROUP
version = TinkLinkVersion.name

if (project.hasProperty("android")) { // Android libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

publishing {
    publications {
        tinkLink(MavenPublication) {
            artifact AAR_PATH

            groupId group
            artifactId POM_NAME
            version this.version

            artifact sourcesJar
            artifact javadocJar

            pom {
                name = POM_NAME
                description = POM_DESCRIPTION
                url = POM_URL
                licenses {
                    license {
                        name = POM_LICENSE_NAME
                        url = POM_LICENSE_URL
                    }
                }
                developers {
                    developer {
                        id = POM_DEVELOPER_ID
                        name = POM_DEVELOPER_NAME
                        email = POM_DEVELOPER_EMAIL
                    }
                }
                scm {
                    connection = POM_GIT_URL
                    developerConnection = POM_GIT_URL
                    url = POM_URL
                }
                // This generates POM.xml with proper dependencies.
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                    configurations.implementation.allDependencies.each { dependency ->
                        // Ensure dependencies such as fileTree are not included.
                        if (dependency.name != 'unspecified') {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', dependency.group)
                            dependencyNode.appendNode('artifactId', dependency.name)
                            dependencyNode.appendNode('version', dependency.version)
                        }
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = OSSRH_STAGING_NAME
            url = OSSRH_STAGING_URL
            credentials {
                username = project.hasProperty('OSSRH_USER') ? OSSRH_USER : ""
                password = project.hasProperty('OSSRH_PASSWORD') ? OSSRH_PASSWORD : ""
            }
        }
    }
}

signing {
    sign(publishing.publications)
}
